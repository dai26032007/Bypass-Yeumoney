// ==UserScript==
// @name         Bypass Yeumoney (Đại)
// @namespace    dai26032007.bpymn
// @version      Premium
// @description  Công cụ được hội người khuyết tật tay Việt Nam tin dùng! Tự động vượt qua mọi nhiệm vụ Yeumoney bất kể xanh hay đỏ giúp bạn tiết kiệm thời gian.
// @author       Nguyễn Bá Đại
// @homepageURL      https://t.me/bypassyeumoney
// @supportURL       https://t.me/bypassyeumoneychat
// @match        https://yeumoney.com/*
// @exclude      https://yeumoney.com/quangly/*
// @icon         https://i.imgur.com/AzWTv3s.png
// @grant        GM_setValue
// @grant        GM_getValue
// @run-at       document-start
// ==/UserScript==
(function () {
  const wm = '\u00A9C' + 'opy' + 'righ' + 't 20' + '25 b' + String.fromCharCode(121) + ' ' + String.fromCharCode(272) + 'ại';
  function md5(s) { return "a45a3902d0a7d304f3042ee7a59bfb80"; }
  if (md5(wm) !== 'a45a3902d0a7d304f3042ee7a59bfb80') while(1){};
  const encoded = "";
  const raw = atob(encoded);
  const key = atob("Y3UjX2Ywcl9t0b1LeV9fZ2hpVg==");
  function rc4Bytes(key, data) {
    const s = [], out = [];
    let j = 0;
    for (let i = 0; i < 256; i++) s[i] = i;
    for (let i = 0; i < 256; i++) {
      j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;
      [s[i], s[j]] = [s[j], s[i]];
    }
    let i = 0; j = 0;
    for (let y = 0; y < data.length; y++) {
      i = (i + 1) % 256;
      j = (j + s[i]) % 256;
      [s[i], s[j]] = [s[j], s[i]];
      const k = s[(s[i] + s[j]) % 256];
      out.push(data[y] ^ k);
    }
    return out;
  }
  const rawBytes = Uint8Array.from(raw, c => c.charCodeAt(0));
  const decryptedBytes = rc4Bytes(key, rawBytes);
  const decoded = new TextDecoder("utf-8").decode(new Uint8Array(decryptedBytes));
  Function("GM_setValue", "GM_getValue", decoded)(GM_setValue, GM_getValue);;
})();